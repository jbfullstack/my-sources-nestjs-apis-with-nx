"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.karmaGenerator = void 0;
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("../../utils/versions");
function addTestInputs(tree) {
    var _a, _b, _c, _d;
    var _e, _f;
    const workspaceConfiguration = (0, devkit_1.readWorkspaceConfiguration)(tree);
    const productionFileSet = (_a = workspaceConfiguration.namedInputs) === null || _a === void 0 ? void 0 : _a.production;
    if (productionFileSet) {
        productionFileSet.push(
        // Exclude spec files from production fileset
        '!{projectRoot}/**/*.spec.[jt]s', 
        // Remove tsconfig.spec.json
        '!{projectRoot}/tsconfig.spec.json', 
        // Remove karma.conf.js
        '!{projectRoot}/karma.conf.js');
        // Dedupe and set
        workspaceConfiguration.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    // Test targets depend on all their project's sources + production sources of dependencies
    (_b = workspaceConfiguration.targetDefaults) !== null && _b !== void 0 ? _b : (workspaceConfiguration.targetDefaults = {});
    (_c = (_e = workspaceConfiguration.targetDefaults).test) !== null && _c !== void 0 ? _c : (_e.test = {});
    (_d = (_f = workspaceConfiguration.targetDefaults.test).inputs) !== null && _d !== void 0 ? _d : (_f.inputs = [
        'default',
        productionFileSet ? '^production' : '^default',
    ]);
    workspaceConfiguration.targetDefaults.test.inputs.push('{workspaceRoot}/karma.conf.js');
    (0, devkit_1.updateWorkspaceConfiguration)(tree, workspaceConfiguration);
}
function karmaGenerator(tree, options) {
    const packageJson = (0, devkit_1.readJson)(tree, 'package.json');
    if (!tree.exists('karma.conf.js')) {
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), '.', {
            tmpl: '',
        });
        addTestInputs(tree);
    }
    if (options.skipPackageJson || packageJson.devDependencies['karma']) {
        return () => { };
    }
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
        karma: versions_1.karmaVersion,
        'karma-chrome-launcher': versions_1.karmaChromeLauncherVersion,
        'karma-coverage': versions_1.karmaCoverageVersion,
        'karma-jasmine': versions_1.karmaJasmineVersion,
        'karma-jasmine-html-reporter': versions_1.karmaJasmineHtmlReporterVersion,
        'jasmine-core': versions_1.jasmineCoreVersion,
        'jasmine-spec-reporter': versions_1.jasmineSpecReporterVersion,
        '@types/jasmine': versions_1.typesJasmineVersion,
        '@types/node': versions_1.typesNodeVersion,
    });
}
exports.karmaGenerator = karmaGenerator;
exports.default = karmaGenerator;
//# sourceMappingURL=karma.js.map