
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  createdAt: Date
  email: string
  pseudo: string
  nickname: string | null
  password: string
  roleId: number
  token: string | null
  activated: boolean
  hidden: boolean
}

/**
 * Model Role
 * 
 */
export type Role = {
  id: number
  name: string
  description: string
}

/**
 * Model Tag
 * 
 */
export type Tag = {
  id: number
  createdAt: Date
  title: string
  description: string | null
  authorId: number
}

/**
 * Model SourceType
 * 
 */
export type SourceType = {
  id: number
  title: string
  description: string | null
}

/**
 * Model Source
 * 
 */
export type Source = {
  id: number
  createdAt: Date
  title: string
  public: boolean
  url: string | null
  content: string | null
  description: string | null
  typeId: number
  ownerId: number
}

/**
 * Model SourceTag
 * 
 */
export type SourceTag = {
  tagId: number
  sourceId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.sourceType`: Exposes CRUD operations for the **SourceType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SourceTypes
    * const sourceTypes = await prisma.sourceType.findMany()
    * ```
    */
  get sourceType(): Prisma.SourceTypeDelegate<GlobalReject>;

  /**
   * `prisma.source`: Exposes CRUD operations for the **Source** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sources
    * const sources = await prisma.source.findMany()
    * ```
    */
  get source(): Prisma.SourceDelegate<GlobalReject>;

  /**
   * `prisma.sourceTag`: Exposes CRUD operations for the **SourceTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SourceTags
    * const sourceTags = await prisma.sourceTag.findMany()
    * ```
    */
  get sourceTag(): Prisma.SourceTagDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Tag: 'Tag',
    SourceType: 'SourceType',
    Source: 'Source',
    SourceTag: 'SourceTag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Tag: number
    source: number
  }

  export type UserCountOutputTypeSelect = {
    Tag?: boolean
    source?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    user: number
  }

  export type RoleCountOutputTypeSelect = {
    user?: boolean
  }

  export type RoleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoleCountOutputType
    : S extends undefined
    ? never
    : S extends RoleCountOutputTypeArgs
    ?'include' extends U
    ? RoleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoleCountOutputType ? RoleCountOutputType[P] : never
  } 
    : RoleCountOutputType
  : RoleCountOutputType




  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     * 
    **/
    select?: RoleCountOutputTypeSelect | null
  }



  /**
   * Count Type TagCountOutputType
   */


  export type TagCountOutputType = {
    sources: number
  }

  export type TagCountOutputTypeSelect = {
    sources?: boolean
  }

  export type TagCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TagCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TagCountOutputType
    : S extends undefined
    ? never
    : S extends TagCountOutputTypeArgs
    ?'include' extends U
    ? TagCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TagCountOutputType ? TagCountOutputType[P] : never
  } 
    : TagCountOutputType
  : TagCountOutputType




  // Custom InputTypes

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     * 
    **/
    select?: TagCountOutputTypeSelect | null
  }



  /**
   * Count Type SourceTypeCountOutputType
   */


  export type SourceTypeCountOutputType = {
    sources: number
  }

  export type SourceTypeCountOutputTypeSelect = {
    sources?: boolean
  }

  export type SourceTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SourceTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SourceTypeCountOutputType
    : S extends undefined
    ? never
    : S extends SourceTypeCountOutputTypeArgs
    ?'include' extends U
    ? SourceTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SourceTypeCountOutputType ? SourceTypeCountOutputType[P] : never
  } 
    : SourceTypeCountOutputType
  : SourceTypeCountOutputType




  // Custom InputTypes

  /**
   * SourceTypeCountOutputType without action
   */
  export type SourceTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SourceTypeCountOutputType
     * 
    **/
    select?: SourceTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type SourceCountOutputType
   */


  export type SourceCountOutputType = {
    tags: number
  }

  export type SourceCountOutputTypeSelect = {
    tags?: boolean
  }

  export type SourceCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SourceCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SourceCountOutputType
    : S extends undefined
    ? never
    : S extends SourceCountOutputTypeArgs
    ?'include' extends U
    ? SourceCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SourceCountOutputType ? SourceCountOutputType[P] : never
  } 
    : SourceCountOutputType
  : SourceCountOutputType




  // Custom InputTypes

  /**
   * SourceCountOutputType without action
   */
  export type SourceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SourceCountOutputType
     * 
    **/
    select?: SourceCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    pseudo: string | null
    nickname: string | null
    password: string | null
    roleId: number | null
    token: string | null
    activated: boolean | null
    hidden: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    pseudo: string | null
    nickname: string | null
    password: string | null
    roleId: number | null
    token: string | null
    activated: boolean | null
    hidden: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    email: number
    pseudo: number
    nickname: number
    password: number
    roleId: number
    token: number
    activated: number
    hidden: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    pseudo?: true
    nickname?: true
    password?: true
    roleId?: true
    token?: true
    activated?: true
    hidden?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    pseudo?: true
    nickname?: true
    password?: true
    roleId?: true
    token?: true
    activated?: true
    hidden?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    pseudo?: true
    nickname?: true
    password?: true
    roleId?: true
    token?: true
    activated?: true
    hidden?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    email: string
    pseudo: string
    nickname: string | null
    password: string
    roleId: number
    token: string | null
    activated: boolean
    hidden: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    email?: boolean
    pseudo?: boolean
    nickname?: boolean
    password?: boolean
    roleId?: boolean
    role?: boolean | RoleArgs
    Tag?: boolean | TagFindManyArgs
    source?: boolean | SourceFindManyArgs
    token?: boolean
    activated?: boolean
    hidden?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    role?: boolean | RoleArgs
    Tag?: boolean | TagFindManyArgs
    source?: boolean | SourceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'role' ? RoleGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Tag' ? Array < TagGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'source' ? Array < SourceGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'role' ? RoleGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Tag' ? Array < TagGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'source' ? Array < SourceGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends RoleArgs = {}>(args?: Subset<T, RoleArgs>): CheckSelect<T, Prisma__RoleClient<Role | Null>, Prisma__RoleClient<RoleGetPayload<T> | Null>>;

    Tag<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>| Null>, PrismaPromise<Array<TagGetPayload<T>>| Null>>;

    source<T extends SourceFindManyArgs = {}>(args?: Subset<T, SourceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Source>| Null>, PrismaPromise<Array<SourceGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which Role to aggregate.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs = {
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithAggregationInput>
    by: Array<RoleScalarFieldEnum>
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    user?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleInclude = {
    user?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleGetPayload<
    S extends boolean | null | undefined | RoleArgs,
    U = keyof S
      > = S extends true
        ? Role
    : S extends undefined
    ? never
    : S extends RoleArgs | RoleFindManyArgs
    ?'include' extends U
    ? Role  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < UserGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < UserGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Role ? Role[P] : never
  } 
    : Role
  : Role


  type RoleCountArgs = Merge<
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }
  >

  export interface RoleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null, null>, Prisma__RoleClient<RoleGetPayload<T> | null, null>>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null, null>, Prisma__RoleClient<RoleGetPayload<T> | null, null>>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs>(
      args?: SelectSubset<T, RoleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Role>>, PrismaPromise<Array<RoleGetPayload<T>>>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs>(
      args: SelectSubset<T, RoleCreateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs>(
      args?: SelectSubset<T, RoleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs>(
      args: SelectSubset<T, RoleDeleteArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs>(
      args: SelectSubset<T, RoleUpdateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs>(
      args?: SelectSubset<T, RoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs>(
      args: SelectSubset<T, RoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs>(
      args: SelectSubset<T, RoleUpsertArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Find one Role that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Find the first Role that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>| Null>, PrismaPromise<Array<UserGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Role base type for findUnique actions
   */
  export type RoleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where: RoleWhereUniqueInput
  }

  /**
   * Role: findUnique
   */
  export interface RoleFindUniqueArgs extends RoleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role base type for findFirst actions
   */
  export type RoleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RoleScalarFieldEnum>
  }

  /**
   * Role: findFirst
   */
  export interface RoleFindFirstArgs extends RoleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findMany
   */
  export type RoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to create a Role.
     * 
    **/
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs = {
    /**
     * The data used to create many Roles.
     * 
    **/
    data: Enumerable<RoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to update a Role.
     * 
    **/
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs = {
    /**
     * The data used to update Roles.
     * 
    **/
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     * 
    **/
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The filter to search for the Role to update in case it exists.
     * 
    **/
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     * 
    **/
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter which Role to delete.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs = {
    /**
     * Filter which Roles to delete
     * 
    **/
    where?: RoleWhereInput
  }


  /**
   * Role: findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs = RoleFindUniqueArgsBase
      

  /**
   * Role: findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs = RoleFindFirstArgsBase
      

  /**
   * Role without action
   */
  export type RoleArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    description: string | null
    authorId: number | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    description: string | null
    authorId: number | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    description: number
    authorId: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    authorId?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    authorId?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    authorId?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    description: string | null
    authorId: number
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    sources?: boolean | SourceTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagInclude = {
    author?: boolean | UserArgs
    sources?: boolean | SourceTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'sources' ? Array < SourceTagGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TagCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'sources' ? Array < SourceTagGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TagCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Tag ? Tag[P] : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null, null>, Prisma__TagClient<TagGetPayload<T> | null, null>>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null, null>, Prisma__TagClient<TagGetPayload<T> | null, null>>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Find one Tag that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Find the first Tag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    sources<T extends SourceTagFindManyArgs = {}>(args?: Subset<T, SourceTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SourceTag>| Null>, PrismaPromise<Array<SourceTagGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tag base type for findUnique actions
   */
  export type TagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where: TagWhereUniqueInput
  }

  /**
   * Tag: findUnique
   */
  export interface TagFindUniqueArgs extends TagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag base type for findFirst actions
   */
  export type TagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }

  /**
   * Tag: findFirst
   */
  export interface TagFindFirstArgs extends TagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
     * 
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    /**
     * The data used to create many Tags.
     * 
    **/
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
     * 
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    /**
     * The data used to update Tags.
     * 
    **/
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
     * 
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     * 
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag: findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs = TagFindUniqueArgsBase
      

  /**
   * Tag: findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs = TagFindFirstArgsBase
      

  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
  }



  /**
   * Model SourceType
   */


  export type AggregateSourceType = {
    _count: SourceTypeCountAggregateOutputType | null
    _avg: SourceTypeAvgAggregateOutputType | null
    _sum: SourceTypeSumAggregateOutputType | null
    _min: SourceTypeMinAggregateOutputType | null
    _max: SourceTypeMaxAggregateOutputType | null
  }

  export type SourceTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type SourceTypeSumAggregateOutputType = {
    id: number | null
  }

  export type SourceTypeMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
  }

  export type SourceTypeMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
  }

  export type SourceTypeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    _all: number
  }


  export type SourceTypeAvgAggregateInputType = {
    id?: true
  }

  export type SourceTypeSumAggregateInputType = {
    id?: true
  }

  export type SourceTypeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
  }

  export type SourceTypeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
  }

  export type SourceTypeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    _all?: true
  }

  export type SourceTypeAggregateArgs = {
    /**
     * Filter which SourceType to aggregate.
     * 
    **/
    where?: SourceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SourceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SourceTypes
    **/
    _count?: true | SourceTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SourceTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SourceTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SourceTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SourceTypeMaxAggregateInputType
  }

  export type GetSourceTypeAggregateType<T extends SourceTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateSourceType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSourceType[P]>
      : GetScalarType<T[P], AggregateSourceType[P]>
  }




  export type SourceTypeGroupByArgs = {
    where?: SourceTypeWhereInput
    orderBy?: Enumerable<SourceTypeOrderByWithAggregationInput>
    by: Array<SourceTypeScalarFieldEnum>
    having?: SourceTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SourceTypeCountAggregateInputType | true
    _avg?: SourceTypeAvgAggregateInputType
    _sum?: SourceTypeSumAggregateInputType
    _min?: SourceTypeMinAggregateInputType
    _max?: SourceTypeMaxAggregateInputType
  }


  export type SourceTypeGroupByOutputType = {
    id: number
    title: string
    description: string | null
    _count: SourceTypeCountAggregateOutputType | null
    _avg: SourceTypeAvgAggregateOutputType | null
    _sum: SourceTypeSumAggregateOutputType | null
    _min: SourceTypeMinAggregateOutputType | null
    _max: SourceTypeMaxAggregateOutputType | null
  }

  type GetSourceTypeGroupByPayload<T extends SourceTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SourceTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SourceTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SourceTypeGroupByOutputType[P]>
            : GetScalarType<T[P], SourceTypeGroupByOutputType[P]>
        }
      >
    >


  export type SourceTypeSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    sources?: boolean | SourceFindManyArgs
    _count?: boolean | SourceTypeCountOutputTypeArgs
  }

  export type SourceTypeInclude = {
    sources?: boolean | SourceFindManyArgs
    _count?: boolean | SourceTypeCountOutputTypeArgs
  }

  export type SourceTypeGetPayload<
    S extends boolean | null | undefined | SourceTypeArgs,
    U = keyof S
      > = S extends true
        ? SourceType
    : S extends undefined
    ? never
    : S extends SourceTypeArgs | SourceTypeFindManyArgs
    ?'include' extends U
    ? SourceType  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sources' ? Array < SourceGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? SourceTypeCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sources' ? Array < SourceGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? SourceTypeCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof SourceType ? SourceType[P] : never
  } 
    : SourceType
  : SourceType


  type SourceTypeCountArgs = Merge<
    Omit<SourceTypeFindManyArgs, 'select' | 'include'> & {
      select?: SourceTypeCountAggregateInputType | true
    }
  >

  export interface SourceTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SourceType that matches the filter.
     * @param {SourceTypeFindUniqueArgs} args - Arguments to find a SourceType
     * @example
     * // Get one SourceType
     * const sourceType = await prisma.sourceType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SourceTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SourceTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SourceType'> extends True ? CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>> : CheckSelect<T, Prisma__SourceTypeClient<SourceType | null, null>, Prisma__SourceTypeClient<SourceTypeGetPayload<T> | null, null>>

    /**
     * Find the first SourceType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeFindFirstArgs} args - Arguments to find a SourceType
     * @example
     * // Get one SourceType
     * const sourceType = await prisma.sourceType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SourceTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SourceTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SourceType'> extends True ? CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>> : CheckSelect<T, Prisma__SourceTypeClient<SourceType | null, null>, Prisma__SourceTypeClient<SourceTypeGetPayload<T> | null, null>>

    /**
     * Find zero or more SourceTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SourceTypes
     * const sourceTypes = await prisma.sourceType.findMany()
     * 
     * // Get first 10 SourceTypes
     * const sourceTypes = await prisma.sourceType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sourceTypeWithIdOnly = await prisma.sourceType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SourceTypeFindManyArgs>(
      args?: SelectSubset<T, SourceTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SourceType>>, PrismaPromise<Array<SourceTypeGetPayload<T>>>>

    /**
     * Create a SourceType.
     * @param {SourceTypeCreateArgs} args - Arguments to create a SourceType.
     * @example
     * // Create one SourceType
     * const SourceType = await prisma.sourceType.create({
     *   data: {
     *     // ... data to create a SourceType
     *   }
     * })
     * 
    **/
    create<T extends SourceTypeCreateArgs>(
      args: SelectSubset<T, SourceTypeCreateArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Create many SourceTypes.
     *     @param {SourceTypeCreateManyArgs} args - Arguments to create many SourceTypes.
     *     @example
     *     // Create many SourceTypes
     *     const sourceType = await prisma.sourceType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SourceTypeCreateManyArgs>(
      args?: SelectSubset<T, SourceTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SourceType.
     * @param {SourceTypeDeleteArgs} args - Arguments to delete one SourceType.
     * @example
     * // Delete one SourceType
     * const SourceType = await prisma.sourceType.delete({
     *   where: {
     *     // ... filter to delete one SourceType
     *   }
     * })
     * 
    **/
    delete<T extends SourceTypeDeleteArgs>(
      args: SelectSubset<T, SourceTypeDeleteArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Update one SourceType.
     * @param {SourceTypeUpdateArgs} args - Arguments to update one SourceType.
     * @example
     * // Update one SourceType
     * const sourceType = await prisma.sourceType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SourceTypeUpdateArgs>(
      args: SelectSubset<T, SourceTypeUpdateArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Delete zero or more SourceTypes.
     * @param {SourceTypeDeleteManyArgs} args - Arguments to filter SourceTypes to delete.
     * @example
     * // Delete a few SourceTypes
     * const { count } = await prisma.sourceType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SourceTypeDeleteManyArgs>(
      args?: SelectSubset<T, SourceTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SourceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SourceTypes
     * const sourceType = await prisma.sourceType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SourceTypeUpdateManyArgs>(
      args: SelectSubset<T, SourceTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SourceType.
     * @param {SourceTypeUpsertArgs} args - Arguments to update or create a SourceType.
     * @example
     * // Update or create a SourceType
     * const sourceType = await prisma.sourceType.upsert({
     *   create: {
     *     // ... data to create a SourceType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SourceType we want to update
     *   }
     * })
    **/
    upsert<T extends SourceTypeUpsertArgs>(
      args: SelectSubset<T, SourceTypeUpsertArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Find one SourceType that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SourceTypeFindUniqueOrThrowArgs} args - Arguments to find a SourceType
     * @example
     * // Get one SourceType
     * const sourceType = await prisma.sourceType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SourceTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SourceTypeFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Find the first SourceType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeFindFirstOrThrowArgs} args - Arguments to find a SourceType
     * @example
     * // Get one SourceType
     * const sourceType = await prisma.sourceType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SourceTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SourceTypeFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceTypeClient<SourceType>, Prisma__SourceTypeClient<SourceTypeGetPayload<T>>>

    /**
     * Count the number of SourceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeCountArgs} args - Arguments to filter SourceTypes to count.
     * @example
     * // Count the number of SourceTypes
     * const count = await prisma.sourceType.count({
     *   where: {
     *     // ... the filter for the SourceTypes we want to count
     *   }
     * })
    **/
    count<T extends SourceTypeCountArgs>(
      args?: Subset<T, SourceTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SourceTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SourceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SourceTypeAggregateArgs>(args: Subset<T, SourceTypeAggregateArgs>): PrismaPromise<GetSourceTypeAggregateType<T>>

    /**
     * Group by SourceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SourceTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SourceTypeGroupByArgs['orderBy'] }
        : { orderBy?: SourceTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SourceTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSourceTypeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SourceType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SourceTypeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sources<T extends SourceFindManyArgs = {}>(args?: Subset<T, SourceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Source>| Null>, PrismaPromise<Array<SourceGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SourceType base type for findUnique actions
   */
  export type SourceTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * Filter, which SourceType to fetch.
     * 
    **/
    where: SourceTypeWhereUniqueInput
  }

  /**
   * SourceType: findUnique
   */
  export interface SourceTypeFindUniqueArgs extends SourceTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SourceType base type for findFirst actions
   */
  export type SourceTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * Filter, which SourceType to fetch.
     * 
    **/
    where?: SourceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SourceTypes.
     * 
    **/
    cursor?: SourceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SourceTypes.
     * 
    **/
    distinct?: Enumerable<SourceTypeScalarFieldEnum>
  }

  /**
   * SourceType: findFirst
   */
  export interface SourceTypeFindFirstArgs extends SourceTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SourceType findMany
   */
  export type SourceTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * Filter, which SourceTypes to fetch.
     * 
    **/
    where?: SourceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SourceTypes.
     * 
    **/
    cursor?: SourceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SourceTypeScalarFieldEnum>
  }


  /**
   * SourceType create
   */
  export type SourceTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * The data needed to create a SourceType.
     * 
    **/
    data: XOR<SourceTypeCreateInput, SourceTypeUncheckedCreateInput>
  }


  /**
   * SourceType createMany
   */
  export type SourceTypeCreateManyArgs = {
    /**
     * The data used to create many SourceTypes.
     * 
    **/
    data: Enumerable<SourceTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SourceType update
   */
  export type SourceTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * The data needed to update a SourceType.
     * 
    **/
    data: XOR<SourceTypeUpdateInput, SourceTypeUncheckedUpdateInput>
    /**
     * Choose, which SourceType to update.
     * 
    **/
    where: SourceTypeWhereUniqueInput
  }


  /**
   * SourceType updateMany
   */
  export type SourceTypeUpdateManyArgs = {
    /**
     * The data used to update SourceTypes.
     * 
    **/
    data: XOR<SourceTypeUpdateManyMutationInput, SourceTypeUncheckedUpdateManyInput>
    /**
     * Filter which SourceTypes to update
     * 
    **/
    where?: SourceTypeWhereInput
  }


  /**
   * SourceType upsert
   */
  export type SourceTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * The filter to search for the SourceType to update in case it exists.
     * 
    **/
    where: SourceTypeWhereUniqueInput
    /**
     * In case the SourceType found by the `where` argument doesn't exist, create a new SourceType with this data.
     * 
    **/
    create: XOR<SourceTypeCreateInput, SourceTypeUncheckedCreateInput>
    /**
     * In case the SourceType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SourceTypeUpdateInput, SourceTypeUncheckedUpdateInput>
  }


  /**
   * SourceType delete
   */
  export type SourceTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
    /**
     * Filter which SourceType to delete.
     * 
    **/
    where: SourceTypeWhereUniqueInput
  }


  /**
   * SourceType deleteMany
   */
  export type SourceTypeDeleteManyArgs = {
    /**
     * Filter which SourceTypes to delete
     * 
    **/
    where?: SourceTypeWhereInput
  }


  /**
   * SourceType: findUniqueOrThrow
   */
  export type SourceTypeFindUniqueOrThrowArgs = SourceTypeFindUniqueArgsBase
      

  /**
   * SourceType: findFirstOrThrow
   */
  export type SourceTypeFindFirstOrThrowArgs = SourceTypeFindFirstArgsBase
      

  /**
   * SourceType without action
   */
  export type SourceTypeArgs = {
    /**
     * Select specific fields to fetch from the SourceType
     * 
    **/
    select?: SourceTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTypeInclude | null
  }



  /**
   * Model Source
   */


  export type AggregateSource = {
    _count: SourceCountAggregateOutputType | null
    _avg: SourceAvgAggregateOutputType | null
    _sum: SourceSumAggregateOutputType | null
    _min: SourceMinAggregateOutputType | null
    _max: SourceMaxAggregateOutputType | null
  }

  export type SourceAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
    ownerId: number | null
  }

  export type SourceSumAggregateOutputType = {
    id: number | null
    typeId: number | null
    ownerId: number | null
  }

  export type SourceMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    public: boolean | null
    url: string | null
    content: string | null
    description: string | null
    typeId: number | null
    ownerId: number | null
  }

  export type SourceMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    public: boolean | null
    url: string | null
    content: string | null
    description: string | null
    typeId: number | null
    ownerId: number | null
  }

  export type SourceCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    public: number
    url: number
    content: number
    description: number
    typeId: number
    ownerId: number
    _all: number
  }


  export type SourceAvgAggregateInputType = {
    id?: true
    typeId?: true
    ownerId?: true
  }

  export type SourceSumAggregateInputType = {
    id?: true
    typeId?: true
    ownerId?: true
  }

  export type SourceMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    public?: true
    url?: true
    content?: true
    description?: true
    typeId?: true
    ownerId?: true
  }

  export type SourceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    public?: true
    url?: true
    content?: true
    description?: true
    typeId?: true
    ownerId?: true
  }

  export type SourceCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    public?: true
    url?: true
    content?: true
    description?: true
    typeId?: true
    ownerId?: true
    _all?: true
  }

  export type SourceAggregateArgs = {
    /**
     * Filter which Source to aggregate.
     * 
    **/
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sources
    **/
    _count?: true | SourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SourceMaxAggregateInputType
  }

  export type GetSourceAggregateType<T extends SourceAggregateArgs> = {
        [P in keyof T & keyof AggregateSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSource[P]>
      : GetScalarType<T[P], AggregateSource[P]>
  }




  export type SourceGroupByArgs = {
    where?: SourceWhereInput
    orderBy?: Enumerable<SourceOrderByWithAggregationInput>
    by: Array<SourceScalarFieldEnum>
    having?: SourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SourceCountAggregateInputType | true
    _avg?: SourceAvgAggregateInputType
    _sum?: SourceSumAggregateInputType
    _min?: SourceMinAggregateInputType
    _max?: SourceMaxAggregateInputType
  }


  export type SourceGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    public: boolean
    url: string | null
    content: string | null
    description: string | null
    typeId: number
    ownerId: number
    _count: SourceCountAggregateOutputType | null
    _avg: SourceAvgAggregateOutputType | null
    _sum: SourceSumAggregateOutputType | null
    _min: SourceMinAggregateOutputType | null
    _max: SourceMaxAggregateOutputType | null
  }

  type GetSourceGroupByPayload<T extends SourceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SourceGroupByOutputType[P]>
            : GetScalarType<T[P], SourceGroupByOutputType[P]>
        }
      >
    >


  export type SourceSelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    public?: boolean
    url?: boolean
    content?: boolean
    description?: boolean
    type?: boolean | SourceTypeArgs
    tags?: boolean | SourceTagFindManyArgs
    owner?: boolean | UserArgs
    typeId?: boolean
    ownerId?: boolean
    _count?: boolean | SourceCountOutputTypeArgs
  }

  export type SourceInclude = {
    type?: boolean | SourceTypeArgs
    tags?: boolean | SourceTagFindManyArgs
    owner?: boolean | UserArgs
    _count?: boolean | SourceCountOutputTypeArgs
  }

  export type SourceGetPayload<
    S extends boolean | null | undefined | SourceArgs,
    U = keyof S
      > = S extends true
        ? Source
    : S extends undefined
    ? never
    : S extends SourceArgs | SourceFindManyArgs
    ?'include' extends U
    ? Source  & {
    [P in TrueKeys<S['include']>]:
        P extends 'type' ? SourceTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'tags' ? Array < SourceTagGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'owner' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends '_count' ? SourceCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'type' ? SourceTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'tags' ? Array < SourceTagGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'owner' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends '_count' ? SourceCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Source ? Source[P] : never
  } 
    : Source
  : Source


  type SourceCountArgs = Merge<
    Omit<SourceFindManyArgs, 'select' | 'include'> & {
      select?: SourceCountAggregateInputType | true
    }
  >

  export interface SourceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Source that matches the filter.
     * @param {SourceFindUniqueArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SourceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SourceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Source'> extends True ? CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>> : CheckSelect<T, Prisma__SourceClient<Source | null, null>, Prisma__SourceClient<SourceGetPayload<T> | null, null>>

    /**
     * Find the first Source that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindFirstArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SourceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SourceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Source'> extends True ? CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>> : CheckSelect<T, Prisma__SourceClient<Source | null, null>, Prisma__SourceClient<SourceGetPayload<T> | null, null>>

    /**
     * Find zero or more Sources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sources
     * const sources = await prisma.source.findMany()
     * 
     * // Get first 10 Sources
     * const sources = await prisma.source.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sourceWithIdOnly = await prisma.source.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SourceFindManyArgs>(
      args?: SelectSubset<T, SourceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Source>>, PrismaPromise<Array<SourceGetPayload<T>>>>

    /**
     * Create a Source.
     * @param {SourceCreateArgs} args - Arguments to create a Source.
     * @example
     * // Create one Source
     * const Source = await prisma.source.create({
     *   data: {
     *     // ... data to create a Source
     *   }
     * })
     * 
    **/
    create<T extends SourceCreateArgs>(
      args: SelectSubset<T, SourceCreateArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Create many Sources.
     *     @param {SourceCreateManyArgs} args - Arguments to create many Sources.
     *     @example
     *     // Create many Sources
     *     const source = await prisma.source.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SourceCreateManyArgs>(
      args?: SelectSubset<T, SourceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Source.
     * @param {SourceDeleteArgs} args - Arguments to delete one Source.
     * @example
     * // Delete one Source
     * const Source = await prisma.source.delete({
     *   where: {
     *     // ... filter to delete one Source
     *   }
     * })
     * 
    **/
    delete<T extends SourceDeleteArgs>(
      args: SelectSubset<T, SourceDeleteArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Update one Source.
     * @param {SourceUpdateArgs} args - Arguments to update one Source.
     * @example
     * // Update one Source
     * const source = await prisma.source.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SourceUpdateArgs>(
      args: SelectSubset<T, SourceUpdateArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Delete zero or more Sources.
     * @param {SourceDeleteManyArgs} args - Arguments to filter Sources to delete.
     * @example
     * // Delete a few Sources
     * const { count } = await prisma.source.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SourceDeleteManyArgs>(
      args?: SelectSubset<T, SourceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sources
     * const source = await prisma.source.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SourceUpdateManyArgs>(
      args: SelectSubset<T, SourceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Source.
     * @param {SourceUpsertArgs} args - Arguments to update or create a Source.
     * @example
     * // Update or create a Source
     * const source = await prisma.source.upsert({
     *   create: {
     *     // ... data to create a Source
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Source we want to update
     *   }
     * })
    **/
    upsert<T extends SourceUpsertArgs>(
      args: SelectSubset<T, SourceUpsertArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Find one Source that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SourceFindUniqueOrThrowArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SourceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SourceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Find the first Source that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindFirstOrThrowArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SourceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SourceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceClient<Source>, Prisma__SourceClient<SourceGetPayload<T>>>

    /**
     * Count the number of Sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceCountArgs} args - Arguments to filter Sources to count.
     * @example
     * // Count the number of Sources
     * const count = await prisma.source.count({
     *   where: {
     *     // ... the filter for the Sources we want to count
     *   }
     * })
    **/
    count<T extends SourceCountArgs>(
      args?: Subset<T, SourceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Source.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SourceAggregateArgs>(args: Subset<T, SourceAggregateArgs>): PrismaPromise<GetSourceAggregateType<T>>

    /**
     * Group by Source.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SourceGroupByArgs['orderBy'] }
        : { orderBy?: SourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSourceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Source.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SourceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    type<T extends SourceTypeArgs = {}>(args?: Subset<T, SourceTypeArgs>): CheckSelect<T, Prisma__SourceTypeClient<SourceType | Null>, Prisma__SourceTypeClient<SourceTypeGetPayload<T> | Null>>;

    tags<T extends SourceTagFindManyArgs = {}>(args?: Subset<T, SourceTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SourceTag>| Null>, PrismaPromise<Array<SourceTagGetPayload<T>>| Null>>;

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Source base type for findUnique actions
   */
  export type SourceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * Filter, which Source to fetch.
     * 
    **/
    where: SourceWhereUniqueInput
  }

  /**
   * Source: findUnique
   */
  export interface SourceFindUniqueArgs extends SourceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Source base type for findFirst actions
   */
  export type SourceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * Filter, which Source to fetch.
     * 
    **/
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sources.
     * 
    **/
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sources.
     * 
    **/
    distinct?: Enumerable<SourceScalarFieldEnum>
  }

  /**
   * Source: findFirst
   */
  export interface SourceFindFirstArgs extends SourceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Source findMany
   */
  export type SourceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * Filter, which Sources to fetch.
     * 
    **/
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sources.
     * 
    **/
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SourceScalarFieldEnum>
  }


  /**
   * Source create
   */
  export type SourceCreateArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * The data needed to create a Source.
     * 
    **/
    data: XOR<SourceCreateInput, SourceUncheckedCreateInput>
  }


  /**
   * Source createMany
   */
  export type SourceCreateManyArgs = {
    /**
     * The data used to create many Sources.
     * 
    **/
    data: Enumerable<SourceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Source update
   */
  export type SourceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * The data needed to update a Source.
     * 
    **/
    data: XOR<SourceUpdateInput, SourceUncheckedUpdateInput>
    /**
     * Choose, which Source to update.
     * 
    **/
    where: SourceWhereUniqueInput
  }


  /**
   * Source updateMany
   */
  export type SourceUpdateManyArgs = {
    /**
     * The data used to update Sources.
     * 
    **/
    data: XOR<SourceUpdateManyMutationInput, SourceUncheckedUpdateManyInput>
    /**
     * Filter which Sources to update
     * 
    **/
    where?: SourceWhereInput
  }


  /**
   * Source upsert
   */
  export type SourceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * The filter to search for the Source to update in case it exists.
     * 
    **/
    where: SourceWhereUniqueInput
    /**
     * In case the Source found by the `where` argument doesn't exist, create a new Source with this data.
     * 
    **/
    create: XOR<SourceCreateInput, SourceUncheckedCreateInput>
    /**
     * In case the Source was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SourceUpdateInput, SourceUncheckedUpdateInput>
  }


  /**
   * Source delete
   */
  export type SourceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
    /**
     * Filter which Source to delete.
     * 
    **/
    where: SourceWhereUniqueInput
  }


  /**
   * Source deleteMany
   */
  export type SourceDeleteManyArgs = {
    /**
     * Filter which Sources to delete
     * 
    **/
    where?: SourceWhereInput
  }


  /**
   * Source: findUniqueOrThrow
   */
  export type SourceFindUniqueOrThrowArgs = SourceFindUniqueArgsBase
      

  /**
   * Source: findFirstOrThrow
   */
  export type SourceFindFirstOrThrowArgs = SourceFindFirstArgsBase
      

  /**
   * Source without action
   */
  export type SourceArgs = {
    /**
     * Select specific fields to fetch from the Source
     * 
    **/
    select?: SourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceInclude | null
  }



  /**
   * Model SourceTag
   */


  export type AggregateSourceTag = {
    _count: SourceTagCountAggregateOutputType | null
    _avg: SourceTagAvgAggregateOutputType | null
    _sum: SourceTagSumAggregateOutputType | null
    _min: SourceTagMinAggregateOutputType | null
    _max: SourceTagMaxAggregateOutputType | null
  }

  export type SourceTagAvgAggregateOutputType = {
    tagId: number | null
    sourceId: number | null
  }

  export type SourceTagSumAggregateOutputType = {
    tagId: number | null
    sourceId: number | null
  }

  export type SourceTagMinAggregateOutputType = {
    tagId: number | null
    sourceId: number | null
  }

  export type SourceTagMaxAggregateOutputType = {
    tagId: number | null
    sourceId: number | null
  }

  export type SourceTagCountAggregateOutputType = {
    tagId: number
    sourceId: number
    _all: number
  }


  export type SourceTagAvgAggregateInputType = {
    tagId?: true
    sourceId?: true
  }

  export type SourceTagSumAggregateInputType = {
    tagId?: true
    sourceId?: true
  }

  export type SourceTagMinAggregateInputType = {
    tagId?: true
    sourceId?: true
  }

  export type SourceTagMaxAggregateInputType = {
    tagId?: true
    sourceId?: true
  }

  export type SourceTagCountAggregateInputType = {
    tagId?: true
    sourceId?: true
    _all?: true
  }

  export type SourceTagAggregateArgs = {
    /**
     * Filter which SourceTag to aggregate.
     * 
    **/
    where?: SourceTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTags to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SourceTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SourceTags
    **/
    _count?: true | SourceTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SourceTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SourceTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SourceTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SourceTagMaxAggregateInputType
  }

  export type GetSourceTagAggregateType<T extends SourceTagAggregateArgs> = {
        [P in keyof T & keyof AggregateSourceTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSourceTag[P]>
      : GetScalarType<T[P], AggregateSourceTag[P]>
  }




  export type SourceTagGroupByArgs = {
    where?: SourceTagWhereInput
    orderBy?: Enumerable<SourceTagOrderByWithAggregationInput>
    by: Array<SourceTagScalarFieldEnum>
    having?: SourceTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SourceTagCountAggregateInputType | true
    _avg?: SourceTagAvgAggregateInputType
    _sum?: SourceTagSumAggregateInputType
    _min?: SourceTagMinAggregateInputType
    _max?: SourceTagMaxAggregateInputType
  }


  export type SourceTagGroupByOutputType = {
    tagId: number
    sourceId: number
    _count: SourceTagCountAggregateOutputType | null
    _avg: SourceTagAvgAggregateOutputType | null
    _sum: SourceTagSumAggregateOutputType | null
    _min: SourceTagMinAggregateOutputType | null
    _max: SourceTagMaxAggregateOutputType | null
  }

  type GetSourceTagGroupByPayload<T extends SourceTagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SourceTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SourceTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SourceTagGroupByOutputType[P]>
            : GetScalarType<T[P], SourceTagGroupByOutputType[P]>
        }
      >
    >


  export type SourceTagSelect = {
    tag?: boolean | TagArgs
    tagId?: boolean
    source?: boolean | SourceArgs
    sourceId?: boolean
  }

  export type SourceTagInclude = {
    tag?: boolean | TagArgs
    source?: boolean | SourceArgs
  }

  export type SourceTagGetPayload<
    S extends boolean | null | undefined | SourceTagArgs,
    U = keyof S
      > = S extends true
        ? SourceTag
    : S extends undefined
    ? never
    : S extends SourceTagArgs | SourceTagFindManyArgs
    ?'include' extends U
    ? SourceTag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tag' ? TagGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'source' ? SourceGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tag' ? TagGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'source' ? SourceGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof SourceTag ? SourceTag[P] : never
  } 
    : SourceTag
  : SourceTag


  type SourceTagCountArgs = Merge<
    Omit<SourceTagFindManyArgs, 'select' | 'include'> & {
      select?: SourceTagCountAggregateInputType | true
    }
  >

  export interface SourceTagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SourceTag that matches the filter.
     * @param {SourceTagFindUniqueArgs} args - Arguments to find a SourceTag
     * @example
     * // Get one SourceTag
     * const sourceTag = await prisma.sourceTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SourceTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SourceTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SourceTag'> extends True ? CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>> : CheckSelect<T, Prisma__SourceTagClient<SourceTag | null, null>, Prisma__SourceTagClient<SourceTagGetPayload<T> | null, null>>

    /**
     * Find the first SourceTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagFindFirstArgs} args - Arguments to find a SourceTag
     * @example
     * // Get one SourceTag
     * const sourceTag = await prisma.sourceTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SourceTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SourceTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SourceTag'> extends True ? CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>> : CheckSelect<T, Prisma__SourceTagClient<SourceTag | null, null>, Prisma__SourceTagClient<SourceTagGetPayload<T> | null, null>>

    /**
     * Find zero or more SourceTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SourceTags
     * const sourceTags = await prisma.sourceTag.findMany()
     * 
     * // Get first 10 SourceTags
     * const sourceTags = await prisma.sourceTag.findMany({ take: 10 })
     * 
     * // Only select the `tagId`
     * const sourceTagWithTagIdOnly = await prisma.sourceTag.findMany({ select: { tagId: true } })
     * 
    **/
    findMany<T extends SourceTagFindManyArgs>(
      args?: SelectSubset<T, SourceTagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SourceTag>>, PrismaPromise<Array<SourceTagGetPayload<T>>>>

    /**
     * Create a SourceTag.
     * @param {SourceTagCreateArgs} args - Arguments to create a SourceTag.
     * @example
     * // Create one SourceTag
     * const SourceTag = await prisma.sourceTag.create({
     *   data: {
     *     // ... data to create a SourceTag
     *   }
     * })
     * 
    **/
    create<T extends SourceTagCreateArgs>(
      args: SelectSubset<T, SourceTagCreateArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Create many SourceTags.
     *     @param {SourceTagCreateManyArgs} args - Arguments to create many SourceTags.
     *     @example
     *     // Create many SourceTags
     *     const sourceTag = await prisma.sourceTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SourceTagCreateManyArgs>(
      args?: SelectSubset<T, SourceTagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SourceTag.
     * @param {SourceTagDeleteArgs} args - Arguments to delete one SourceTag.
     * @example
     * // Delete one SourceTag
     * const SourceTag = await prisma.sourceTag.delete({
     *   where: {
     *     // ... filter to delete one SourceTag
     *   }
     * })
     * 
    **/
    delete<T extends SourceTagDeleteArgs>(
      args: SelectSubset<T, SourceTagDeleteArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Update one SourceTag.
     * @param {SourceTagUpdateArgs} args - Arguments to update one SourceTag.
     * @example
     * // Update one SourceTag
     * const sourceTag = await prisma.sourceTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SourceTagUpdateArgs>(
      args: SelectSubset<T, SourceTagUpdateArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Delete zero or more SourceTags.
     * @param {SourceTagDeleteManyArgs} args - Arguments to filter SourceTags to delete.
     * @example
     * // Delete a few SourceTags
     * const { count } = await prisma.sourceTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SourceTagDeleteManyArgs>(
      args?: SelectSubset<T, SourceTagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SourceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SourceTags
     * const sourceTag = await prisma.sourceTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SourceTagUpdateManyArgs>(
      args: SelectSubset<T, SourceTagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SourceTag.
     * @param {SourceTagUpsertArgs} args - Arguments to update or create a SourceTag.
     * @example
     * // Update or create a SourceTag
     * const sourceTag = await prisma.sourceTag.upsert({
     *   create: {
     *     // ... data to create a SourceTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SourceTag we want to update
     *   }
     * })
    **/
    upsert<T extends SourceTagUpsertArgs>(
      args: SelectSubset<T, SourceTagUpsertArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Find one SourceTag that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SourceTagFindUniqueOrThrowArgs} args - Arguments to find a SourceTag
     * @example
     * // Get one SourceTag
     * const sourceTag = await prisma.sourceTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SourceTagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SourceTagFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Find the first SourceTag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagFindFirstOrThrowArgs} args - Arguments to find a SourceTag
     * @example
     * // Get one SourceTag
     * const sourceTag = await prisma.sourceTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SourceTagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SourceTagFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SourceTagClient<SourceTag>, Prisma__SourceTagClient<SourceTagGetPayload<T>>>

    /**
     * Count the number of SourceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagCountArgs} args - Arguments to filter SourceTags to count.
     * @example
     * // Count the number of SourceTags
     * const count = await prisma.sourceTag.count({
     *   where: {
     *     // ... the filter for the SourceTags we want to count
     *   }
     * })
    **/
    count<T extends SourceTagCountArgs>(
      args?: Subset<T, SourceTagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SourceTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SourceTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SourceTagAggregateArgs>(args: Subset<T, SourceTagAggregateArgs>): PrismaPromise<GetSourceTagAggregateType<T>>

    /**
     * Group by SourceTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SourceTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SourceTagGroupByArgs['orderBy'] }
        : { orderBy?: SourceTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SourceTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSourceTagGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SourceTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SourceTagClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tag<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | Null>, Prisma__TagClient<TagGetPayload<T> | Null>>;

    source<T extends SourceArgs = {}>(args?: Subset<T, SourceArgs>): CheckSelect<T, Prisma__SourceClient<Source | Null>, Prisma__SourceClient<SourceGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SourceTag base type for findUnique actions
   */
  export type SourceTagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * Filter, which SourceTag to fetch.
     * 
    **/
    where: SourceTagWhereUniqueInput
  }

  /**
   * SourceTag: findUnique
   */
  export interface SourceTagFindUniqueArgs extends SourceTagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SourceTag base type for findFirst actions
   */
  export type SourceTagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * Filter, which SourceTag to fetch.
     * 
    **/
    where?: SourceTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTags to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SourceTags.
     * 
    **/
    cursor?: SourceTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SourceTags.
     * 
    **/
    distinct?: Enumerable<SourceTagScalarFieldEnum>
  }

  /**
   * SourceTag: findFirst
   */
  export interface SourceTagFindFirstArgs extends SourceTagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SourceTag findMany
   */
  export type SourceTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * Filter, which SourceTags to fetch.
     * 
    **/
    where?: SourceTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceTags to fetch.
     * 
    **/
    orderBy?: Enumerable<SourceTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SourceTags.
     * 
    **/
    cursor?: SourceTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceTags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SourceTagScalarFieldEnum>
  }


  /**
   * SourceTag create
   */
  export type SourceTagCreateArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * The data needed to create a SourceTag.
     * 
    **/
    data: XOR<SourceTagCreateInput, SourceTagUncheckedCreateInput>
  }


  /**
   * SourceTag createMany
   */
  export type SourceTagCreateManyArgs = {
    /**
     * The data used to create many SourceTags.
     * 
    **/
    data: Enumerable<SourceTagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SourceTag update
   */
  export type SourceTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * The data needed to update a SourceTag.
     * 
    **/
    data: XOR<SourceTagUpdateInput, SourceTagUncheckedUpdateInput>
    /**
     * Choose, which SourceTag to update.
     * 
    **/
    where: SourceTagWhereUniqueInput
  }


  /**
   * SourceTag updateMany
   */
  export type SourceTagUpdateManyArgs = {
    /**
     * The data used to update SourceTags.
     * 
    **/
    data: XOR<SourceTagUpdateManyMutationInput, SourceTagUncheckedUpdateManyInput>
    /**
     * Filter which SourceTags to update
     * 
    **/
    where?: SourceTagWhereInput
  }


  /**
   * SourceTag upsert
   */
  export type SourceTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * The filter to search for the SourceTag to update in case it exists.
     * 
    **/
    where: SourceTagWhereUniqueInput
    /**
     * In case the SourceTag found by the `where` argument doesn't exist, create a new SourceTag with this data.
     * 
    **/
    create: XOR<SourceTagCreateInput, SourceTagUncheckedCreateInput>
    /**
     * In case the SourceTag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SourceTagUpdateInput, SourceTagUncheckedUpdateInput>
  }


  /**
   * SourceTag delete
   */
  export type SourceTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
    /**
     * Filter which SourceTag to delete.
     * 
    **/
    where: SourceTagWhereUniqueInput
  }


  /**
   * SourceTag deleteMany
   */
  export type SourceTagDeleteManyArgs = {
    /**
     * Filter which SourceTags to delete
     * 
    **/
    where?: SourceTagWhereInput
  }


  /**
   * SourceTag: findUniqueOrThrow
   */
  export type SourceTagFindUniqueOrThrowArgs = SourceTagFindUniqueArgsBase
      

  /**
   * SourceTag: findFirstOrThrow
   */
  export type SourceTagFindFirstOrThrowArgs = SourceTagFindFirstArgsBase
      

  /**
   * SourceTag without action
   */
  export type SourceTagArgs = {
    /**
     * Select specific fields to fetch from the SourceTag
     * 
    **/
    select?: SourceTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SourceTagInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SourceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    public: 'public',
    url: 'url',
    content: 'content',
    description: 'description',
    typeId: 'typeId',
    ownerId: 'ownerId'
  };

  export type SourceScalarFieldEnum = (typeof SourceScalarFieldEnum)[keyof typeof SourceScalarFieldEnum]


  export const SourceTagScalarFieldEnum: {
    tagId: 'tagId',
    sourceId: 'sourceId'
  };

  export type SourceTagScalarFieldEnum = (typeof SourceTagScalarFieldEnum)[keyof typeof SourceTagScalarFieldEnum]


  export const SourceTypeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description'
  };

  export type SourceTypeScalarFieldEnum = (typeof SourceTypeScalarFieldEnum)[keyof typeof SourceTypeScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    description: 'description',
    authorId: 'authorId'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    email: 'email',
    pseudo: 'pseudo',
    nickname: 'nickname',
    password: 'password',
    roleId: 'roleId',
    token: 'token',
    activated: 'activated',
    hidden: 'hidden'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    pseudo?: StringFilter | string
    nickname?: StringNullableFilter | string | null
    password?: StringFilter | string
    roleId?: IntFilter | number
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    Tag?: TagListRelationFilter
    source?: SourceListRelationFilter
    token?: StringNullableFilter | string | null
    activated?: BoolFilter | boolean
    hidden?: BoolFilter | boolean
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    role?: RoleOrderByWithRelationInput
    Tag?: TagOrderByRelationAggregateInput
    source?: SourceOrderByRelationAggregateInput
    token?: SortOrder
    activated?: SortOrder
    hidden?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    pseudo?: string
    nickname?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    token?: SortOrder
    activated?: SortOrder
    hidden?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    pseudo?: StringWithAggregatesFilter | string
    nickname?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    roleId?: IntWithAggregatesFilter | number
    token?: StringNullableWithAggregatesFilter | string | null
    activated?: BoolWithAggregatesFilter | boolean
    hidden?: BoolWithAggregatesFilter | boolean
  }

  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    user?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    authorId?: IntFilter | number
    sources?: SourceTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: UserOrderByWithRelationInput
    authorId?: SortOrder
    sources?: SourceTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = {
    id?: number
    title?: string
  }

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    authorId?: IntWithAggregatesFilter | number
  }

  export type SourceTypeWhereInput = {
    AND?: Enumerable<SourceTypeWhereInput>
    OR?: Enumerable<SourceTypeWhereInput>
    NOT?: Enumerable<SourceTypeWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    sources?: SourceListRelationFilter
  }

  export type SourceTypeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    sources?: SourceOrderByRelationAggregateInput
  }

  export type SourceTypeWhereUniqueInput = {
    id?: number
    title?: string
  }

  export type SourceTypeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    _count?: SourceTypeCountOrderByAggregateInput
    _avg?: SourceTypeAvgOrderByAggregateInput
    _max?: SourceTypeMaxOrderByAggregateInput
    _min?: SourceTypeMinOrderByAggregateInput
    _sum?: SourceTypeSumOrderByAggregateInput
  }

  export type SourceTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SourceTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<SourceTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SourceTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
  }

  export type SourceWhereInput = {
    AND?: Enumerable<SourceWhereInput>
    OR?: Enumerable<SourceWhereInput>
    NOT?: Enumerable<SourceWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    public?: BoolFilter | boolean
    url?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    type?: XOR<SourceTypeRelationFilter, SourceTypeWhereInput>
    tags?: SourceTagListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    typeId?: IntFilter | number
    ownerId?: IntFilter | number
  }

  export type SourceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    public?: SortOrder
    url?: SortOrder
    content?: SortOrder
    description?: SortOrder
    type?: SourceTypeOrderByWithRelationInput
    tags?: SourceTagOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type SourceWhereUniqueInput = {
    id?: number
  }

  export type SourceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    public?: SortOrder
    url?: SortOrder
    content?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
    _count?: SourceCountOrderByAggregateInput
    _avg?: SourceAvgOrderByAggregateInput
    _max?: SourceMaxOrderByAggregateInput
    _min?: SourceMinOrderByAggregateInput
    _sum?: SourceSumOrderByAggregateInput
  }

  export type SourceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SourceScalarWhereWithAggregatesInput>
    OR?: Enumerable<SourceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SourceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    public?: BoolWithAggregatesFilter | boolean
    url?: StringNullableWithAggregatesFilter | string | null
    content?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    typeId?: IntWithAggregatesFilter | number
    ownerId?: IntWithAggregatesFilter | number
  }

  export type SourceTagWhereInput = {
    AND?: Enumerable<SourceTagWhereInput>
    OR?: Enumerable<SourceTagWhereInput>
    NOT?: Enumerable<SourceTagWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput> | null
    tagId?: IntFilter | number
    source?: XOR<SourceRelationFilter, SourceWhereInput> | null
    sourceId?: IntFilter | number
  }

  export type SourceTagOrderByWithRelationInput = {
    tag?: TagOrderByWithRelationInput
    tagId?: SortOrder
    source?: SourceOrderByWithRelationInput
    sourceId?: SortOrder
  }

  export type SourceTagWhereUniqueInput = {
    sourceId_tagId?: SourceTagSourceIdTagIdCompoundUniqueInput
  }

  export type SourceTagOrderByWithAggregationInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
    _count?: SourceTagCountOrderByAggregateInput
    _avg?: SourceTagAvgOrderByAggregateInput
    _max?: SourceTagMaxOrderByAggregateInput
    _min?: SourceTagMinOrderByAggregateInput
    _sum?: SourceTagSumOrderByAggregateInput
  }

  export type SourceTagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SourceTagScalarWhereWithAggregatesInput>
    OR?: Enumerable<SourceTagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SourceTagScalarWhereWithAggregatesInput>
    tagId?: IntWithAggregatesFilter | number
    sourceId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    role: RoleCreateNestedOneWithoutUserInput
    Tag?: TagCreateNestedManyWithoutAuthorInput
    source?: SourceCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    roleId: number
    Tag?: TagUncheckedCreateNestedManyWithoutAuthorInput
    source?: SourceUncheckedCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUserNestedInput
    Tag?: TagUpdateManyWithoutAuthorNestedInput
    source?: SourceUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Tag?: TagUncheckedUpdateManyWithoutAuthorNestedInput
    source?: SourceUncheckedUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    roleId: number
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleCreateInput = {
    name: string
    description: string
    user?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    user?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    createdAt?: Date | string
    title: string
    description?: string | null
    author: UserCreateNestedOneWithoutTagInput
    sources?: SourceTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description?: string | null
    authorId: number
    sources?: SourceTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutTagNestedInput
    sources?: SourceTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: IntFieldUpdateOperationsInput | number
    sources?: SourceTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description?: string | null
    authorId: number
  }

  export type TagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTypeCreateInput = {
    title: string
    description?: string | null
    sources?: SourceCreateNestedManyWithoutTypeInput
  }

  export type SourceTypeUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    sources?: SourceUncheckedCreateNestedManyWithoutTypeInput
  }

  export type SourceTypeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: SourceUpdateManyWithoutTypeNestedInput
  }

  export type SourceTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: SourceUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type SourceTypeCreateManyInput = {
    id?: number
    title: string
    description?: string | null
  }

  export type SourceTypeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceCreateInput = {
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    type: SourceTypeCreateNestedOneWithoutSourcesInput
    tags?: SourceTagCreateNestedManyWithoutSourceInput
    owner: UserCreateNestedOneWithoutSourceInput
  }

  export type SourceUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    tags?: SourceTagUncheckedCreateNestedManyWithoutSourceInput
    typeId: number
    ownerId: number
  }

  export type SourceUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: SourceTypeUpdateOneRequiredWithoutSourcesNestedInput
    tags?: SourceTagUpdateManyWithoutSourceNestedInput
    owner?: UserUpdateOneRequiredWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SourceTagUncheckedUpdateManyWithoutSourceNestedInput
    typeId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    typeId: number
    ownerId: number
  }

  export type SourceUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTagCreateInput = {
    tag?: TagCreateNestedOneWithoutSourcesInput
    source?: SourceCreateNestedOneWithoutTagsInput
  }

  export type SourceTagUncheckedCreateInput = {
    tagId: number
    sourceId: number
  }

  export type SourceTagUpdateInput = {
    tag?: TagUpdateOneWithoutSourcesNestedInput
    source?: SourceUpdateOneWithoutTagsNestedInput
  }

  export type SourceTagUncheckedUpdateInput = {
    tagId?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTagCreateManyInput = {
    tagId: number
    sourceId: number
  }

  export type SourceTagUpdateManyMutationInput = {

  }

  export type SourceTagUncheckedUpdateManyInput = {
    tagId?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type SourceListRelationFilter = {
    every?: SourceWhereInput
    some?: SourceWhereInput
    none?: SourceWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    token?: SortOrder
    activated?: SortOrder
    hidden?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    token?: SortOrder
    activated?: SortOrder
    hidden?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    token?: SortOrder
    activated?: SortOrder
    hidden?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SourceTagListRelationFilter = {
    every?: SourceTagWhereInput
    some?: SourceTagWhereInput
    none?: SourceTagWhereInput
  }

  export type SourceTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type SourceTypeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type SourceTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SourceTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type SourceTypeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type SourceTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SourceTypeRelationFilter = {
    is?: SourceTypeWhereInput
    isNot?: SourceTypeWhereInput
  }

  export type SourceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    public?: SortOrder
    url?: SortOrder
    content?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type SourceAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type SourceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    public?: SortOrder
    url?: SortOrder
    content?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type SourceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    public?: SortOrder
    url?: SortOrder
    content?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type SourceSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    ownerId?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput | null
    isNot?: TagWhereInput | null
  }

  export type SourceRelationFilter = {
    is?: SourceWhereInput | null
    isNot?: SourceWhereInput | null
  }

  export type SourceTagSourceIdTagIdCompoundUniqueInput = {
    sourceId: number
    tagId: number
  }

  export type SourceTagCountOrderByAggregateInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
  }

  export type SourceTagAvgOrderByAggregateInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
  }

  export type SourceTagMaxOrderByAggregateInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
  }

  export type SourceTagMinOrderByAggregateInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
  }

  export type SourceTagSumOrderByAggregateInput = {
    tagId?: SortOrder
    sourceId?: SortOrder
  }

  export type RoleCreateNestedOneWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput
    connect?: RoleWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<TagCreateWithoutAuthorInput>, Enumerable<TagUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutAuthorInput>
    createMany?: TagCreateManyAuthorInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type SourceCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<SourceCreateWithoutOwnerInput>, Enumerable<SourceUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutOwnerInput>
    createMany?: SourceCreateManyOwnerInputEnvelope
    connect?: Enumerable<SourceWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<TagCreateWithoutAuthorInput>, Enumerable<TagUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutAuthorInput>
    createMany?: TagCreateManyAuthorInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type SourceUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<SourceCreateWithoutOwnerInput>, Enumerable<SourceUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutOwnerInput>
    createMany?: SourceCreateManyOwnerInputEnvelope
    connect?: Enumerable<SourceWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RoleUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput
    upsert?: RoleUpsertWithoutUserInput
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
  }

  export type TagUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<TagCreateWithoutAuthorInput>, Enumerable<TagUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: TagCreateManyAuthorInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type SourceUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<SourceCreateWithoutOwnerInput>, Enumerable<SourceUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<SourceUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: SourceCreateManyOwnerInputEnvelope
    set?: Enumerable<SourceWhereUniqueInput>
    disconnect?: Enumerable<SourceWhereUniqueInput>
    delete?: Enumerable<SourceWhereUniqueInput>
    connect?: Enumerable<SourceWhereUniqueInput>
    update?: Enumerable<SourceUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<SourceUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<SourceScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TagUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<TagCreateWithoutAuthorInput>, Enumerable<TagUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: TagCreateManyAuthorInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type SourceUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<SourceCreateWithoutOwnerInput>, Enumerable<SourceUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<SourceUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: SourceCreateManyOwnerInputEnvelope
    set?: Enumerable<SourceWhereUniqueInput>
    disconnect?: Enumerable<SourceWhereUniqueInput>
    delete?: Enumerable<SourceWhereUniqueInput>
    connect?: Enumerable<SourceWhereUniqueInput>
    update?: Enumerable<SourceUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<SourceUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<SourceScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTagInput = {
    create?: XOR<UserCreateWithoutTagInput, UserUncheckedCreateWithoutTagInput>
    connectOrCreate?: UserCreateOrConnectWithoutTagInput
    connect?: UserWhereUniqueInput
  }

  export type SourceTagCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutTagInput>, Enumerable<SourceTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutTagInput>
    createMany?: SourceTagCreateManyTagInputEnvelope
    connect?: Enumerable<SourceTagWhereUniqueInput>
  }

  export type SourceTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutTagInput>, Enumerable<SourceTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutTagInput>
    createMany?: SourceTagCreateManyTagInputEnvelope
    connect?: Enumerable<SourceTagWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutTagNestedInput = {
    create?: XOR<UserCreateWithoutTagInput, UserUncheckedCreateWithoutTagInput>
    connectOrCreate?: UserCreateOrConnectWithoutTagInput
    upsert?: UserUpsertWithoutTagInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTagInput, UserUncheckedUpdateWithoutTagInput>
  }

  export type SourceTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutTagInput>, Enumerable<SourceTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<SourceTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: SourceTagCreateManyTagInputEnvelope
    set?: Enumerable<SourceTagWhereUniqueInput>
    disconnect?: Enumerable<SourceTagWhereUniqueInput>
    delete?: Enumerable<SourceTagWhereUniqueInput>
    connect?: Enumerable<SourceTagWhereUniqueInput>
    update?: Enumerable<SourceTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<SourceTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<SourceTagScalarWhereInput>
  }

  export type SourceTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutTagInput>, Enumerable<SourceTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<SourceTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: SourceTagCreateManyTagInputEnvelope
    set?: Enumerable<SourceTagWhereUniqueInput>
    disconnect?: Enumerable<SourceTagWhereUniqueInput>
    delete?: Enumerable<SourceTagWhereUniqueInput>
    connect?: Enumerable<SourceTagWhereUniqueInput>
    update?: Enumerable<SourceTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<SourceTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<SourceTagScalarWhereInput>
  }

  export type SourceCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<SourceCreateWithoutTypeInput>, Enumerable<SourceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutTypeInput>
    createMany?: SourceCreateManyTypeInputEnvelope
    connect?: Enumerable<SourceWhereUniqueInput>
  }

  export type SourceUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<SourceCreateWithoutTypeInput>, Enumerable<SourceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutTypeInput>
    createMany?: SourceCreateManyTypeInputEnvelope
    connect?: Enumerable<SourceWhereUniqueInput>
  }

  export type SourceUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<SourceCreateWithoutTypeInput>, Enumerable<SourceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<SourceUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: SourceCreateManyTypeInputEnvelope
    set?: Enumerable<SourceWhereUniqueInput>
    disconnect?: Enumerable<SourceWhereUniqueInput>
    delete?: Enumerable<SourceWhereUniqueInput>
    connect?: Enumerable<SourceWhereUniqueInput>
    update?: Enumerable<SourceUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<SourceUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<SourceScalarWhereInput>
  }

  export type SourceUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<SourceCreateWithoutTypeInput>, Enumerable<SourceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<SourceCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<SourceUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: SourceCreateManyTypeInputEnvelope
    set?: Enumerable<SourceWhereUniqueInput>
    disconnect?: Enumerable<SourceWhereUniqueInput>
    delete?: Enumerable<SourceWhereUniqueInput>
    connect?: Enumerable<SourceWhereUniqueInput>
    update?: Enumerable<SourceUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<SourceUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<SourceScalarWhereInput>
  }

  export type SourceTypeCreateNestedOneWithoutSourcesInput = {
    create?: XOR<SourceTypeCreateWithoutSourcesInput, SourceTypeUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: SourceTypeCreateOrConnectWithoutSourcesInput
    connect?: SourceTypeWhereUniqueInput
  }

  export type SourceTagCreateNestedManyWithoutSourceInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutSourceInput>, Enumerable<SourceTagUncheckedCreateWithoutSourceInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutSourceInput>
    createMany?: SourceTagCreateManySourceInputEnvelope
    connect?: Enumerable<SourceTagWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutSourceInput = {
    create?: XOR<UserCreateWithoutSourceInput, UserUncheckedCreateWithoutSourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutSourceInput
    connect?: UserWhereUniqueInput
  }

  export type SourceTagUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutSourceInput>, Enumerable<SourceTagUncheckedCreateWithoutSourceInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutSourceInput>
    createMany?: SourceTagCreateManySourceInputEnvelope
    connect?: Enumerable<SourceTagWhereUniqueInput>
  }

  export type SourceTypeUpdateOneRequiredWithoutSourcesNestedInput = {
    create?: XOR<SourceTypeCreateWithoutSourcesInput, SourceTypeUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: SourceTypeCreateOrConnectWithoutSourcesInput
    upsert?: SourceTypeUpsertWithoutSourcesInput
    connect?: SourceTypeWhereUniqueInput
    update?: XOR<SourceTypeUpdateWithoutSourcesInput, SourceTypeUncheckedUpdateWithoutSourcesInput>
  }

  export type SourceTagUpdateManyWithoutSourceNestedInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutSourceInput>, Enumerable<SourceTagUncheckedCreateWithoutSourceInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutSourceInput>
    upsert?: Enumerable<SourceTagUpsertWithWhereUniqueWithoutSourceInput>
    createMany?: SourceTagCreateManySourceInputEnvelope
    set?: Enumerable<SourceTagWhereUniqueInput>
    disconnect?: Enumerable<SourceTagWhereUniqueInput>
    delete?: Enumerable<SourceTagWhereUniqueInput>
    connect?: Enumerable<SourceTagWhereUniqueInput>
    update?: Enumerable<SourceTagUpdateWithWhereUniqueWithoutSourceInput>
    updateMany?: Enumerable<SourceTagUpdateManyWithWhereWithoutSourceInput>
    deleteMany?: Enumerable<SourceTagScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutSourceNestedInput = {
    create?: XOR<UserCreateWithoutSourceInput, UserUncheckedCreateWithoutSourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutSourceInput
    upsert?: UserUpsertWithoutSourceInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSourceInput, UserUncheckedUpdateWithoutSourceInput>
  }

  export type SourceTagUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<Enumerable<SourceTagCreateWithoutSourceInput>, Enumerable<SourceTagUncheckedCreateWithoutSourceInput>>
    connectOrCreate?: Enumerable<SourceTagCreateOrConnectWithoutSourceInput>
    upsert?: Enumerable<SourceTagUpsertWithWhereUniqueWithoutSourceInput>
    createMany?: SourceTagCreateManySourceInputEnvelope
    set?: Enumerable<SourceTagWhereUniqueInput>
    disconnect?: Enumerable<SourceTagWhereUniqueInput>
    delete?: Enumerable<SourceTagWhereUniqueInput>
    connect?: Enumerable<SourceTagWhereUniqueInput>
    update?: Enumerable<SourceTagUpdateWithWhereUniqueWithoutSourceInput>
    updateMany?: Enumerable<SourceTagUpdateManyWithWhereWithoutSourceInput>
    deleteMany?: Enumerable<SourceTagScalarWhereInput>
  }

  export type TagCreateNestedOneWithoutSourcesInput = {
    create?: XOR<TagCreateWithoutSourcesInput, TagUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: TagCreateOrConnectWithoutSourcesInput
    connect?: TagWhereUniqueInput
  }

  export type SourceCreateNestedOneWithoutTagsInput = {
    create?: XOR<SourceCreateWithoutTagsInput, SourceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: SourceCreateOrConnectWithoutTagsInput
    connect?: SourceWhereUniqueInput
  }

  export type TagUpdateOneWithoutSourcesNestedInput = {
    create?: XOR<TagCreateWithoutSourcesInput, TagUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: TagCreateOrConnectWithoutSourcesInput
    upsert?: TagUpsertWithoutSourcesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TagWhereUniqueInput
    update?: XOR<TagUpdateWithoutSourcesInput, TagUncheckedUpdateWithoutSourcesInput>
  }

  export type SourceUpdateOneWithoutTagsNestedInput = {
    create?: XOR<SourceCreateWithoutTagsInput, SourceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: SourceCreateOrConnectWithoutTagsInput
    upsert?: SourceUpsertWithoutTagsInput
    disconnect?: boolean
    delete?: boolean
    connect?: SourceWhereUniqueInput
    update?: XOR<SourceUpdateWithoutTagsInput, SourceUncheckedUpdateWithoutTagsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type RoleCreateWithoutUserInput = {
    name: string
    description: string
  }

  export type RoleUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description: string
  }

  export type RoleCreateOrConnectWithoutUserInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type TagCreateWithoutAuthorInput = {
    createdAt?: Date | string
    title: string
    description?: string | null
    sources?: SourceTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutAuthorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description?: string | null
    sources?: SourceTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutAuthorInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutAuthorInput, TagUncheckedCreateWithoutAuthorInput>
  }

  export type TagCreateManyAuthorInputEnvelope = {
    data: Enumerable<TagCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type SourceCreateWithoutOwnerInput = {
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    type: SourceTypeCreateNestedOneWithoutSourcesInput
    tags?: SourceTagCreateNestedManyWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    tags?: SourceTagUncheckedCreateNestedManyWithoutSourceInput
    typeId: number
  }

  export type SourceCreateOrConnectWithoutOwnerInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutOwnerInput, SourceUncheckedCreateWithoutOwnerInput>
  }

  export type SourceCreateManyOwnerInputEnvelope = {
    data: Enumerable<SourceCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithoutUserInput = {
    update: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type RoleUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TagUpsertWithWhereUniqueWithoutAuthorInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutAuthorInput, TagUncheckedUpdateWithoutAuthorInput>
    create: XOR<TagCreateWithoutAuthorInput, TagUncheckedCreateWithoutAuthorInput>
  }

  export type TagUpdateWithWhereUniqueWithoutAuthorInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutAuthorInput, TagUncheckedUpdateWithoutAuthorInput>
  }

  export type TagUpdateManyWithWhereWithoutAuthorInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagInput>
  }

  export type TagScalarWhereInput = {
    AND?: Enumerable<TagScalarWhereInput>
    OR?: Enumerable<TagScalarWhereInput>
    NOT?: Enumerable<TagScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    authorId?: IntFilter | number
  }

  export type SourceUpsertWithWhereUniqueWithoutOwnerInput = {
    where: SourceWhereUniqueInput
    update: XOR<SourceUpdateWithoutOwnerInput, SourceUncheckedUpdateWithoutOwnerInput>
    create: XOR<SourceCreateWithoutOwnerInput, SourceUncheckedCreateWithoutOwnerInput>
  }

  export type SourceUpdateWithWhereUniqueWithoutOwnerInput = {
    where: SourceWhereUniqueInput
    data: XOR<SourceUpdateWithoutOwnerInput, SourceUncheckedUpdateWithoutOwnerInput>
  }

  export type SourceUpdateManyWithWhereWithoutOwnerInput = {
    where: SourceScalarWhereInput
    data: XOR<SourceUpdateManyMutationInput, SourceUncheckedUpdateManyWithoutSourceInput>
  }

  export type SourceScalarWhereInput = {
    AND?: Enumerable<SourceScalarWhereInput>
    OR?: Enumerable<SourceScalarWhereInput>
    NOT?: Enumerable<SourceScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    public?: BoolFilter | boolean
    url?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    typeId?: IntFilter | number
    ownerId?: IntFilter | number
  }

  export type UserCreateWithoutRoleInput = {
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    Tag?: TagCreateNestedManyWithoutAuthorInput
    source?: SourceCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    Tag?: TagUncheckedCreateNestedManyWithoutAuthorInput
    source?: SourceUncheckedCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: Enumerable<UserCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    pseudo?: StringFilter | string
    nickname?: StringNullableFilter | string | null
    password?: StringFilter | string
    roleId?: IntFilter | number
    token?: StringNullableFilter | string | null
    activated?: BoolFilter | boolean
    hidden?: BoolFilter | boolean
  }

  export type UserCreateWithoutTagInput = {
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    role: RoleCreateNestedOneWithoutUserInput
    source?: SourceCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUncheckedCreateWithoutTagInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    roleId: number
    source?: SourceUncheckedCreateNestedManyWithoutOwnerInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserCreateOrConnectWithoutTagInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTagInput, UserUncheckedCreateWithoutTagInput>
  }

  export type SourceTagCreateWithoutTagInput = {
    source?: SourceCreateNestedOneWithoutTagsInput
  }

  export type SourceTagUncheckedCreateWithoutTagInput = {
    sourceId: number
  }

  export type SourceTagCreateOrConnectWithoutTagInput = {
    where: SourceTagWhereUniqueInput
    create: XOR<SourceTagCreateWithoutTagInput, SourceTagUncheckedCreateWithoutTagInput>
  }

  export type SourceTagCreateManyTagInputEnvelope = {
    data: Enumerable<SourceTagCreateManyTagInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTagInput = {
    update: XOR<UserUpdateWithoutTagInput, UserUncheckedUpdateWithoutTagInput>
    create: XOR<UserCreateWithoutTagInput, UserUncheckedCreateWithoutTagInput>
  }

  export type UserUpdateWithoutTagInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUserNestedInput
    source?: SourceUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    source?: SourceUncheckedUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SourceTagUpsertWithWhereUniqueWithoutTagInput = {
    where: SourceTagWhereUniqueInput
    update: XOR<SourceTagUpdateWithoutTagInput, SourceTagUncheckedUpdateWithoutTagInput>
    create: XOR<SourceTagCreateWithoutTagInput, SourceTagUncheckedCreateWithoutTagInput>
  }

  export type SourceTagUpdateWithWhereUniqueWithoutTagInput = {
    where: SourceTagWhereUniqueInput
    data: XOR<SourceTagUpdateWithoutTagInput, SourceTagUncheckedUpdateWithoutTagInput>
  }

  export type SourceTagUpdateManyWithWhereWithoutTagInput = {
    where: SourceTagScalarWhereInput
    data: XOR<SourceTagUpdateManyMutationInput, SourceTagUncheckedUpdateManyWithoutSourcesInput>
  }

  export type SourceTagScalarWhereInput = {
    AND?: Enumerable<SourceTagScalarWhereInput>
    OR?: Enumerable<SourceTagScalarWhereInput>
    NOT?: Enumerable<SourceTagScalarWhereInput>
    tagId?: IntFilter | number
    sourceId?: IntFilter | number
  }

  export type SourceCreateWithoutTypeInput = {
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    tags?: SourceTagCreateNestedManyWithoutSourceInput
    owner: UserCreateNestedOneWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutTypeInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    tags?: SourceTagUncheckedCreateNestedManyWithoutSourceInput
    ownerId: number
  }

  export type SourceCreateOrConnectWithoutTypeInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutTypeInput, SourceUncheckedCreateWithoutTypeInput>
  }

  export type SourceCreateManyTypeInputEnvelope = {
    data: Enumerable<SourceCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type SourceUpsertWithWhereUniqueWithoutTypeInput = {
    where: SourceWhereUniqueInput
    update: XOR<SourceUpdateWithoutTypeInput, SourceUncheckedUpdateWithoutTypeInput>
    create: XOR<SourceCreateWithoutTypeInput, SourceUncheckedCreateWithoutTypeInput>
  }

  export type SourceUpdateWithWhereUniqueWithoutTypeInput = {
    where: SourceWhereUniqueInput
    data: XOR<SourceUpdateWithoutTypeInput, SourceUncheckedUpdateWithoutTypeInput>
  }

  export type SourceUpdateManyWithWhereWithoutTypeInput = {
    where: SourceScalarWhereInput
    data: XOR<SourceUpdateManyMutationInput, SourceUncheckedUpdateManyWithoutSourcesInput>
  }

  export type SourceTypeCreateWithoutSourcesInput = {
    title: string
    description?: string | null
  }

  export type SourceTypeUncheckedCreateWithoutSourcesInput = {
    id?: number
    title: string
    description?: string | null
  }

  export type SourceTypeCreateOrConnectWithoutSourcesInput = {
    where: SourceTypeWhereUniqueInput
    create: XOR<SourceTypeCreateWithoutSourcesInput, SourceTypeUncheckedCreateWithoutSourcesInput>
  }

  export type SourceTagCreateWithoutSourceInput = {
    tag?: TagCreateNestedOneWithoutSourcesInput
  }

  export type SourceTagUncheckedCreateWithoutSourceInput = {
    tagId: number
  }

  export type SourceTagCreateOrConnectWithoutSourceInput = {
    where: SourceTagWhereUniqueInput
    create: XOR<SourceTagCreateWithoutSourceInput, SourceTagUncheckedCreateWithoutSourceInput>
  }

  export type SourceTagCreateManySourceInputEnvelope = {
    data: Enumerable<SourceTagCreateManySourceInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutSourceInput = {
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    role: RoleCreateNestedOneWithoutUserInput
    Tag?: TagCreateNestedManyWithoutAuthorInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUncheckedCreateWithoutSourceInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    roleId: number
    Tag?: TagUncheckedCreateNestedManyWithoutAuthorInput
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserCreateOrConnectWithoutSourceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSourceInput, UserUncheckedCreateWithoutSourceInput>
  }

  export type SourceTypeUpsertWithoutSourcesInput = {
    update: XOR<SourceTypeUpdateWithoutSourcesInput, SourceTypeUncheckedUpdateWithoutSourcesInput>
    create: XOR<SourceTypeCreateWithoutSourcesInput, SourceTypeUncheckedCreateWithoutSourcesInput>
  }

  export type SourceTypeUpdateWithoutSourcesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceTypeUncheckedUpdateWithoutSourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceTagUpsertWithWhereUniqueWithoutSourceInput = {
    where: SourceTagWhereUniqueInput
    update: XOR<SourceTagUpdateWithoutSourceInput, SourceTagUncheckedUpdateWithoutSourceInput>
    create: XOR<SourceTagCreateWithoutSourceInput, SourceTagUncheckedCreateWithoutSourceInput>
  }

  export type SourceTagUpdateWithWhereUniqueWithoutSourceInput = {
    where: SourceTagWhereUniqueInput
    data: XOR<SourceTagUpdateWithoutSourceInput, SourceTagUncheckedUpdateWithoutSourceInput>
  }

  export type SourceTagUpdateManyWithWhereWithoutSourceInput = {
    where: SourceTagScalarWhereInput
    data: XOR<SourceTagUpdateManyMutationInput, SourceTagUncheckedUpdateManyWithoutTagsInput>
  }

  export type UserUpsertWithoutSourceInput = {
    update: XOR<UserUpdateWithoutSourceInput, UserUncheckedUpdateWithoutSourceInput>
    create: XOR<UserCreateWithoutSourceInput, UserUncheckedCreateWithoutSourceInput>
  }

  export type UserUpdateWithoutSourceInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUserNestedInput
    Tag?: TagUpdateManyWithoutAuthorNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutSourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Tag?: TagUncheckedUpdateManyWithoutAuthorNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagCreateWithoutSourcesInput = {
    createdAt?: Date | string
    title: string
    description?: string | null
    author: UserCreateNestedOneWithoutTagInput
  }

  export type TagUncheckedCreateWithoutSourcesInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description?: string | null
    authorId: number
  }

  export type TagCreateOrConnectWithoutSourcesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutSourcesInput, TagUncheckedCreateWithoutSourcesInput>
  }

  export type SourceCreateWithoutTagsInput = {
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    type: SourceTypeCreateNestedOneWithoutSourcesInput
    owner: UserCreateNestedOneWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutTagsInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    typeId: number
    ownerId: number
  }

  export type SourceCreateOrConnectWithoutTagsInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutTagsInput, SourceUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutSourcesInput = {
    update: XOR<TagUpdateWithoutSourcesInput, TagUncheckedUpdateWithoutSourcesInput>
    create: XOR<TagCreateWithoutSourcesInput, TagUncheckedCreateWithoutSourcesInput>
  }

  export type TagUpdateWithoutSourcesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutSourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceUpsertWithoutTagsInput = {
    update: XOR<SourceUpdateWithoutTagsInput, SourceUncheckedUpdateWithoutTagsInput>
    create: XOR<SourceCreateWithoutTagsInput, SourceUncheckedCreateWithoutTagsInput>
  }

  export type SourceUpdateWithoutTagsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: SourceTypeUpdateOneRequiredWithoutSourcesNestedInput
    owner?: UserUpdateOneRequiredWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateManyAuthorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description?: string | null
  }

  export type SourceCreateManyOwnerInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    typeId: number
  }

  export type TagUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: SourceTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: SourceTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: SourceTypeUpdateOneRequiredWithoutSourcesNestedInput
    tags?: SourceTagUpdateManyWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SourceTagUncheckedUpdateManyWithoutSourceNestedInput
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceUncheckedUpdateManyWithoutSourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyRoleInput = {
    id?: number
    createdAt?: Date | string
    email: string
    pseudo: string
    nickname?: string | null
    password: string
    token?: string | null
    activated: boolean
    hidden: boolean
  }

  export type UserUpdateWithoutRoleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Tag?: TagUpdateManyWithoutAuthorNestedInput
    source?: SourceUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    Tag?: TagUncheckedUpdateManyWithoutAuthorNestedInput
    source?: SourceUncheckedUpdateManyWithoutOwnerNestedInput
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    activated?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SourceTagCreateManyTagInput = {
    sourceId: number
  }

  export type SourceTagUpdateWithoutTagInput = {
    source?: SourceUpdateOneWithoutTagsNestedInput
  }

  export type SourceTagUncheckedUpdateWithoutTagInput = {
    sourceId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTagUncheckedUpdateManyWithoutSourcesInput = {
    sourceId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceCreateManyTypeInput = {
    id?: number
    createdAt?: Date | string
    title: string
    public?: boolean
    url?: string | null
    content?: string | null
    description?: string | null
    ownerId: number
  }

  export type SourceUpdateWithoutTypeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SourceTagUpdateManyWithoutSourceNestedInput
    owner?: UserUpdateOneRequiredWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SourceTagUncheckedUpdateManyWithoutSourceNestedInput
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceUncheckedUpdateManyWithoutSourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    public?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTagCreateManySourceInput = {
    tagId: number
  }

  export type SourceTagUpdateWithoutSourceInput = {
    tag?: TagUpdateOneWithoutSourcesNestedInput
  }

  export type SourceTagUncheckedUpdateWithoutSourceInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type SourceTagUncheckedUpdateManyWithoutTagsInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}