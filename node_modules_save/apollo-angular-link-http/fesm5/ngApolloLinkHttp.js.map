{"version":3,"file":"ngApolloLinkHttp.js","sources":["apollo-angular-link-http/HttpLink.ts","apollo-angular-link-http/HttpLinkModule.ts","apollo-angular-link-http/ngApolloLinkHttp.ts"],"names":["LinkObservable"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  ApolloLink,\n  Observable as LinkObservable,\n  Operation,\n  FetchResult,\n} from 'apollo-link';\nimport {print} from 'graphql';\nimport {\n  fetch,\n  Options,\n  Body,\n  Request,\n  Context,\n  mergeHeaders,\n  prioritize,\n} from 'apollo-angular-link-http-common';\nimport {extractFiles} from 'extract-files';\n\n// XXX find a better name for it\nexport class HttpLinkHandler extends ApolloLink {\n  public requester: (\n    operation: Operation,\n  ) => LinkObservable<FetchResult> | null;\n\n  constructor(private httpClient: HttpClient, private options: Options) {\n    super();\n\n    this.requester = (operation: Operation) =>\n      new LinkObservable((observer: any) => {\n        const context: Context = operation.getContext();\n\n        // decides which value to pick, Context, Options or to just use the default\n        const pick = <K extends keyof Context | keyof Options>(\n          key: K,\n          init?: Context[K] | Options[K],\n        ): Context[K] | Options[K] => {\n          return prioritize(context[key], this.options[key], init);\n        };\n\n        const includeQuery = pick('includeQuery', true);\n        const includeExtensions = pick('includeExtensions', false);\n        const method = pick('method', 'POST');\n        const url = pick('uri', 'graphql');\n        const withCredentials = pick('withCredentials');\n        const useMultipart = pick('useMultipart');\n\n        const req: Request = {\n          method,\n          url: typeof url === 'function' ? url(operation) : url,\n          body: {\n            operationName: operation.operationName,\n            variables: operation.variables,\n          },\n          options: {\n            withCredentials,\n            useMultipart,\n            headers: this.options.headers,\n          },\n        };\n\n        if (includeExtensions) {\n          (req.body as Body).extensions = operation.extensions;\n        }\n\n        if (includeQuery) {\n          (req.body as Body).query = print(operation.query);\n        }\n\n        if (context.headers) {\n          req.options.headers = mergeHeaders(\n            req.options.headers,\n            context.headers,\n          );\n        }\n\n        const sub = fetch(req, this.httpClient, extractFiles).subscribe({\n          next: response => {\n            operation.setContext({response});\n            observer.next(response.body);\n          },\n          error: err => observer.error(err),\n          complete: () => observer.complete(),\n        });\n\n        return () => {\n          if (!sub.closed) {\n            sub.unsubscribe();\n          }\n        };\n      });\n  }\n\n  public request(op: Operation): LinkObservable<FetchResult> | null {\n    return this.requester(op);\n  }\n}\n\n@Injectable()\nexport class HttpLink {\n  constructor(private httpClient: HttpClient) {}\n\n  public create(options: Options): HttpLinkHandler {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {HttpLink} from './HttpLink';\n\nexport const PROVIDERS = [HttpLink];\n\n@NgModule({\n  providers: PROVIDERS,\n})\nexport class HttpLinkModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}