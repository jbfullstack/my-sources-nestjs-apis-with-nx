{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../schematics/install/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {dirname} from 'path';\nimport {\n  apply,\n  chain,\n  url,\n  template,\n  Tree,\n  Rule,\n  SchematicContext,\n  mergeWith,\n  move,\n} from '@angular-devkit/schematics';\nimport {NodePackageInstallTask} from '@angular-devkit/schematics/tasks';\nimport {getAppModulePath} from '@schematics/angular/utility/ng-ast-utils';\nimport {tags} from '@angular-devkit/core';\nimport {CompilerOptions} from 'typescript';\n\nimport {getJsonFile, getMainPath} from '../utils';\nimport {Schema} from './schema';\nimport {addModuleImportToRootModule} from '../utils/ast';\n\nexport function factory(options: Schema): Rule {\n  return chain([\n    addDependencies(options),\n    inludeAsyncIterableLib(),\n    allowSyntheticDefaultImports(),\n    addSetupFiles(options),\n    importSetupModule(options),\n    importHttpClientModule(options),\n  ]);\n}\n\nexport function createDependenciesMap(options: Schema): Record<string, string> {\n  return {\n  'apollo-angular': '^4.0.1',\n  '@apollo/client': '^3.0.0',\n  graphql: `^${options.graphql ?? '16.0.0'}`,\n};\n}\n\n/**\n * Add all necessary node packages\n * as dependencies in the package.json\n * and installs them by running `npm install`.\n */\nfunction addDependencies(options: Schema) {\n  return (host: Tree, context: SchematicContext) => {\n    const packageJsonPath = 'package.json';\n    const packageJson = getJsonFile(host, packageJsonPath);\n\n    packageJson.dependencies = packageJson.dependencies || {};\n\n    const dependenciesMap = createDependenciesMap(options);\n    for (const dependency in dependenciesMap) {\n      if (dependenciesMap.hasOwnProperty(dependency)) {\n        const version = dependenciesMap[dependency];\n        if (!packageJson.dependencies[dependency]) {\n          packageJson.dependencies[dependency] = version;\n        }\n      }\n    }\n\n    // save the changed file\n    host.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n    // schedule `npm install`\n    context.addTask(new NodePackageInstallTask());\n\n    return host;\n  };\n}\n\nfunction inludeAsyncIterableLib() {\n  const requiredLib = 'esnext.asynciterable';\n\n  function updateFn(tsconfig: any) {\n    const compilerOptions: CompilerOptions = tsconfig.compilerOptions;\n\n    if (\n      compilerOptions &&\n      compilerOptions.lib &&\n      !compilerOptions.lib.find((lib) => lib.toLowerCase() === requiredLib)\n    ) {\n      compilerOptions.lib.push(requiredLib);\n      return true;\n    }\n  }\n\n  return (host: Tree) => {\n    if (\n      !updateTSConfig('tsconfig.json', host, updateFn) &&\n      !updateTSConfig('tsconfig.base.json', host, updateFn)\n    ) {\n      console.error(\n        '\\n' +\n          tags.stripIndent`\n              We couln't find '${requiredLib}' in the list of library files to be included in the compilation.\n              It's required by '@apollo/client/core' package so please add it to your tsconfig.\n            ` +\n          '\\n',\n      );\n    }\n\n    return host;\n  };\n}\n\nfunction updateTSConfig(\n  tsconfigPath: string,\n  host: Tree,\n  updateFn: (tsconfig: any) => boolean,\n): boolean {\n  try {\n    const tsconfig = getJsonFile(host, tsconfigPath);\n\n    if (updateFn(tsconfig)) {\n      host.overwrite(tsconfigPath, JSON.stringify(tsconfig, null, 2));\n\n      return true;\n    }\n  } catch (error) {\n    //\n  }\n\n  return false;\n}\n\nfunction allowSyntheticDefaultImports() {\n  function updateFn(tsconfig: any) {\n    if (\n      tsconfig?.compilerOptions &&\n      tsconfig?.compilerOptions?.lib &&\n      !tsconfig.compilerOptions.allowSyntheticDefaultImports\n    ) {\n      tsconfig.compilerOptions.allowSyntheticDefaultImports = true;\n      return true;\n    }\n  }\n\n  return (host: Tree) => {\n    if (\n      !updateTSConfig('tsconfig.json', host, updateFn) &&\n      !updateTSConfig('tsconfig.base.json', host, updateFn)\n    ) {\n      console.error(\n        '\\n' +\n          tags.stripIndent`\n              We couln't enable 'allowSyntheticDefaultImports' flag.\n              It's required by '@apollo/client/core' package so please add it to your tsconfig.\n            ` +\n          '\\n',\n      );\n    }\n\n    return host;\n  };\n}\n\nfunction addSetupFiles(options: Schema) {\n  return (host: Tree) => {\n    const mainPath = getMainPath(host, options.project);\n    const appModulePath = getAppModulePath(host, mainPath);\n    const appModuleDirectory = dirname(appModulePath);\n\n    const templateSource = apply(url('./files'), [\n      template({\n        endpoint: options.endpoint,\n      }),\n      move(appModuleDirectory),\n    ]);\n\n    return mergeWith(templateSource);\n  };\n}\n\nfunction importSetupModule(options: Schema) {\n  return (host: Tree) => {\n    addModuleImportToRootModule(\n      host,\n      'GraphQLModule',\n      './graphql.module',\n      options.project,\n    );\n\n    return host;\n  };\n}\n\nfunction importHttpClientModule(options: Schema) {\n  return (host: Tree) => {\n    addModuleImportToRootModule(\n      host,\n      'HttpClientModule',\n      '@angular/common/http',\n      options.project,\n    );\n  };\n}\n"]}