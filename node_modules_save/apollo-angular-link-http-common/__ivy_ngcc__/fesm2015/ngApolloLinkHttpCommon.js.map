{"version":3,"file":"ngApolloLinkHttpCommon.js","sources":["apollo-angular-link-http-common/utils.ts","apollo-angular-link-http-common/ngApolloLinkHttpCommon.ts"],"names":[],"mappings":"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","sourcesContent":["import {HttpHeaders, HttpResponse, HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nimport {Request, Body, ExtractFiles} from './types';\n\nexport const fetch = (\n  req: Request,\n  httpClient: HttpClient,\n  extractFiles: ExtractFiles,\n): Observable<HttpResponse<Object>> => {\n  const shouldUseBody =\n    ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;\n  const shouldStringify = (param: string) =>\n    ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;\n  const isBatching = (req.body as Body[]).length;\n  let shouldUseMultipart = req.options && req.options.useMultipart;\n  let multipartInfo: {\n    clone: Body;\n    files: Map<any, any>;\n  };\n\n  if (shouldUseMultipart) {\n    if (isBatching) {\n      return new Observable(observer =>\n        observer.error(\n          new Error('File upload is not available when combined with Batching'),\n        ),\n      );\n    }\n\n    if (!shouldUseBody) {\n      return new Observable(observer =>\n        observer.error(\n          new Error('File upload is not available when GET is used'),\n        ),\n      );\n    }\n\n    multipartInfo = extractFiles(req.body);\n\n    shouldUseMultipart = !!multipartInfo.files.size;\n  }\n\n  // `body` for some, `params` for others\n  let bodyOrParams = {};\n\n  if (isBatching) {\n    if (!shouldUseBody) {\n      return new Observable(observer =>\n        observer.error(new Error('Batching is not available for GET requests')),\n      );\n    }\n\n    bodyOrParams = {\n      body: req.body,\n    };\n  } else {\n    const body = shouldUseMultipart ? multipartInfo!.clone : req.body;\n\n    if (shouldUseBody) {\n      bodyOrParams = {\n        body,\n      };\n    } else {\n      const params = Object.keys(req.body).reduce((obj: any, param) => {\n        const value = (req.body as any)[param];\n        obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;\n        return obj;\n      }, {});\n\n      bodyOrParams = {params: params};\n    }\n  }\n\n  if (shouldUseMultipart && shouldUseBody) {\n    const form = new FormData();\n\n    form.append('operations', JSON.stringify((bodyOrParams as any).body));\n\n    const map: Record<string, any> = {};\n    const files = multipartInfo!.files;\n\n    let i = 0;\n    files.forEach(paths => {\n      map[++i] = paths;\n    });\n\n    form.append('map', JSON.stringify(map));\n\n    i = 0;\n    files.forEach((_, file) => {\n      form.append(++i + '', file, file.name);\n    });\n\n    (bodyOrParams as any).body = form;\n  }\n\n  // create a request\n  return httpClient.request<Object>(req.method, req.url, {\n    observe: 'response',\n    responseType: 'json',\n    reportProgress: false,\n    ...bodyOrParams,\n    ...req.options,\n  });\n};\n\nexport const mergeHeaders = (\n  source: HttpHeaders,\n  destination: HttpHeaders,\n): HttpHeaders => {\n  if (source && destination) {\n    const merged = destination\n      .keys()\n      .reduce(\n        (headers, name) => headers.set(name, destination.getAll(name)),\n        source,\n      );\n\n    return merged;\n  }\n\n  return destination || source;\n};\n\nexport function prioritize<T>(...values: T[]): T {\n  const picked = values.find(val => typeof val !== 'undefined');\n\n  if (typeof picked === 'undefined') {\n    return values[values.length - 1];\n  }\n\n  return picked;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}